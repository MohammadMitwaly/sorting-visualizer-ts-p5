{"version":3,"sources":["Components/MainSketch.tsx","Utils/GenerateRandomArray.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MainSketch","props","useState","window","innerWidth","width","arrayOfValues","setArrarrayOfValues","i","useEffect","len","lowerBound","upperbound","Array","from","length","Math","floor","random","generateRandomArray","innerHeight","swapItems","index","indexToSwap","temp","setup","p5","canvasParentRef","createCanvas","windowWidth","windowHeight","parent","frameRate","draw","background","j","stroke","line","height","console","log","noLoop","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAWaA,EAAwC,SAACC,GAA4B,IAAD,EACtDC,mBAASC,OAAOC,YADsC,mBACzEC,EADyE,aAEnCH,mBAAmB,KAFgB,mBAEzEI,EAFyE,KAE1DC,EAF0D,KAG5EC,EAAI,EAERC,qBAAU,WACTF,ECfiC,SAACG,GAAoD,IAAvCC,EAAsC,uDAAzB,EAAGC,EAAsB,uDAAT,IAC1E,OAAOC,MAAMC,KAAK,CAACC,OAAQL,IAAM,kBAAMM,KAAKC,MAAMD,KAAKE,UAAYN,EAAaD,GAAcA,MDc5EQ,CAAoBd,EAAO,EAAGF,OAAOiB,YAAY,MACnE,IAEH,IAAMC,EAAY,SAACf,EAAyBgB,EAAeC,GAC1D,IAAMC,EAAOlB,EAAcgB,GAC3BhB,EAAcgB,GAAShB,EAAciB,GACrCjB,EAAciB,GAAeC,EAC7BjB,EAAoBD,IAkCrB,OAAO,cAAC,IAAD,CAAQmB,MA9BD,SAACC,EAAaC,GAC3BD,EAAGE,aAAaF,EAAGG,YAAaH,EAAGI,cAAcC,OAAOJ,GACxDD,EAAGM,UAAU,KA4BeC,KAzBhB,SAACP,GAGb,GAFAA,EAAGQ,WAAW,WAEV1B,EAAIF,EAAcS,OACrB,IAAK,IAAIoB,EAAI,EAAGA,EAAI7B,EAAcS,OAASP,EAAI,EAAG2B,IAAK,CAC7C7B,EAAc6B,GACd7B,EAAc6B,EAAI,KAE3BT,EAAGU,OAAO,IAAI,EAAE,GAChBV,EAAGW,KAAK7B,EAAGkB,EAAGY,OAAQ9B,EAAGkB,EAAGY,OAAShC,EAAcE,IACnDa,EAAUf,EAAe6B,EAAGA,EAAI,SAIjCI,QAAQC,IAAI,mBACZd,EAAGe,SAEFjC,IAEF,IAAK,IAAIA,EAAI,EAAGA,EAAIF,EAAcS,OAAQP,IACzCkB,EAAGU,OAAO,WACVV,EAAGW,KAAK7B,EAAGkB,EAAGY,OAAQ9B,EAAGkB,EAAGY,OAAShC,EAAcE,QE1CvCkC,MARf,WACE,OACI,mCACA,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f90abf5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport p5Types from \"p5\"; //Import this for typechecking and intellisense\r\nimport Sketch from \"react-p5\";\r\nimport { generateRandomArray } from \"../Utils/GenerateRandomArray\";\r\n\r\ninterface MainSketchProps {\r\n\t//Your component props\r\n}\r\n\r\n\r\n\r\nexport const MainSketch: React.FC<MainSketchProps> = (props: MainSketchProps) => {\r\n\tconst [width, setWidth] = useState(window.innerWidth);\r\n\tconst [arrayOfValues, setArrarrayOfValues] = useState<number[]>([]);\r\n\tlet i = 0;\r\n\r\n\tuseEffect(()=>{\r\n\t\tsetArrarrayOfValues(generateRandomArray(width, 5 ,window.innerHeight-5));\r\n\t}, []);\r\n\r\n\tconst swapItems = (arrayOfValues: number[], index: number, indexToSwap: number) => {\r\n\t\tconst temp = arrayOfValues[index]\r\n\t\tarrayOfValues[index] = arrayOfValues[indexToSwap]\r\n\t\tarrayOfValues[indexToSwap] = temp \r\n\t\tsetArrarrayOfValues(arrayOfValues);\r\n\t}\r\n\r\n\t//See annotations in JS for more information\r\n\tconst setup = (p5: p5Types, canvasParentRef : Element) => {\r\n\t\tp5.createCanvas(p5.windowWidth, p5.windowHeight).parent(canvasParentRef);\r\n\t\tp5.frameRate(10);\r\n\t};\r\n\r\n\tconst draw = (p5: p5Types) => {\r\n\t\tp5.background(\"#172121\");\r\n\r\n\t\tif (i < arrayOfValues.length) {\r\n\t\t\tfor (let j = 0; j < arrayOfValues.length - i - 1; j++) {\r\n\t\t\t  let a = arrayOfValues[j];\r\n\t\t\t  let b = arrayOfValues[j + 1];\r\n\t\t\t  if (a > b) {\r\n\t\t\t\tp5.stroke(255,0,0);\r\n\t\t\t\tp5.line(i, p5.height, i, p5.height - arrayOfValues[i]);\r\n\t\t\t\tswapItems(arrayOfValues, j, j + 1);\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t  } else {\r\n\t\t\tconsole.log('Array is sorted');\r\n\t\t\tp5.noLoop();\r\n\t\t  }\r\n\t\t  i++;\r\n\r\n\t\tfor (let i = 0; i < arrayOfValues.length; i++) {\r\n\t\t\tp5.stroke(\"#E5D0CC\");\r\n\t\t\tp5.line(i, p5.height, i, p5.height - arrayOfValues[i]);\r\n\t\t  }\r\n\t};\r\n\r\n\treturn <Sketch setup={setup} draw={draw} />;\r\n};\r\n\r\n","\r\n// Help from: https://stackoverflow.com/questions/5836833/create-an-array-with-random-values\r\nexport const generateRandomArray = (len: number, lowerBound = 5, upperbound = 1000) => {\r\n    return Array.from({length: len}, () => Math.floor(Math.random() * (upperbound - lowerBound) + lowerBound));\r\n}","import React from 'react';\nimport './App.css';\nimport {MainSketch} from './Components/MainSketch';\n\nfunction App() {\n  return (\n      <>\n      <MainSketch/>\n      </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}