{"version":3,"sources":["Utils/GenerateRandomArray.ts","Components/BubbleSortSketch.tsx","Components/QuickSortSketch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["generateRandomArray","len","lowerBound","upperbound","Array","from","length","Math","floor","random","BubbleSortSketch","props","useState","window","innerWidth","width","arrayOfValues","setArrarrayOfValues","i","useEffect","innerHeight","swapItems","index","indexToSwap","temp","setup","p5","canvasParentRef","createCanvas","windowWidth","windowHeight","parent","frameRate","draw","background","j","stroke","line","height","console","log","noLoop","QuickSortSketch","fill","valueStatus","setValueStatus","delaySwap","duration","Promise","resolve","setTimeout","a","tempArray","quickSort","array","startIndex","endIndex","partition","pivotIndex","tempArr","all","pivotValue","forEach","value","noStroke","rect","App","sortingSelector","setSortingSlecetorState","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8654a635.chunk.js","sourcesContent":["\r\n// Help from: https://stackoverflow.com/questions/5836833/create-an-array-with-random-values\r\nexport const generateRandomArray = (len: number, lowerBound = 5, upperbound = 1000) => {\r\n    return Array.from({length: len}, () => Math.floor(Math.random() * (upperbound - lowerBound) + lowerBound));\r\n}","import React, { useEffect, useState } from 'react';\r\nimport p5Types from 'p5'; //Import this for typechecking and intellisense\r\nimport Sketch from 'react-p5';\r\nimport { generateRandomArray } from '../Utils/GenerateRandomArray';\r\n\r\ninterface BubbleSortSketchProps {}\r\n\r\nexport const BubbleSortSketch: React.FC<BubbleSortSketchProps> = (\r\n    props: BubbleSortSketchProps\r\n) => {\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    const [arrayOfValues, setArrarrayOfValues] = useState<number[]>([]);\r\n    let i = 0;\r\n\r\n    useEffect(() => {\r\n        setArrarrayOfValues(\r\n            generateRandomArray(width, 5, window.innerHeight - 5)\r\n        );\r\n    }, []);\r\n\r\n    const swapItems = (\r\n        arrayOfValues: number[],\r\n        index: number,\r\n        indexToSwap: number\r\n    ) => {\r\n        const temp = arrayOfValues[index];\r\n        arrayOfValues[index] = arrayOfValues[indexToSwap];\r\n        arrayOfValues[indexToSwap] = temp;\r\n        setArrarrayOfValues(arrayOfValues);\r\n    };\r\n\r\n    //See annotations in JS for more information\r\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n        p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(\r\n            canvasParentRef\r\n        );\r\n        p5.frameRate(10);\r\n    };\r\n\r\n    const draw = (p5: p5Types) => {\r\n        p5.background('#172121');\r\n\r\n        if (i < arrayOfValues.length) {\r\n            for (let j = 0; j < arrayOfValues.length - i - 1; j++) {\r\n                let a = arrayOfValues[j];\r\n                let b = arrayOfValues[j + 1];\r\n                if (a > b) {\r\n                    p5.stroke(255, 0, 0);\r\n                    p5.line(i, p5.height, i, p5.height - arrayOfValues[i]);\r\n                    swapItems(arrayOfValues, j, j + 1);\r\n                }\r\n            }\r\n        } else {\r\n            console.log('Array is sorted');\r\n            p5.noLoop();\r\n        }\r\n        i++;\r\n\r\n        for (let i = 0; i < arrayOfValues.length; i++) {\r\n            p5.stroke('#E5D0CC');\r\n            p5.line(i, p5.height, i, p5.height - arrayOfValues[i]);\r\n        }\r\n    };\r\n\r\n    return <Sketch setup={setup} draw={draw} />;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport p5Types from 'p5';\r\nimport Sketch from 'react-p5';\r\nimport { generateRandomArray } from '../Utils/GenerateRandomArray';\r\n\r\ninterface QuickSortSketchProps {}\r\n\r\nexport const QuickSortSketch: React.FC<QuickSortSketchProps> = (\r\n    props: QuickSortSketchProps\r\n) => {\r\n    const [width, setWidth] = useState(10);\r\n    const [arrayOfValues, setArrarrayOfValues] = useState<number[]>(\r\n        generateRandomArray(window.innerWidth / 10, 5, window.innerHeight - 50)\r\n    );\r\n    let [valueStatus, setValueStatus] = useState<number[]>(\r\n        new Array(10).fill(-1)\r\n    );\r\n\r\n    const delaySwap = (duration: number) => {\r\n        return new Promise((resolve) => setTimeout(resolve, duration));\r\n    };\r\n\r\n    const swapItems = async (\r\n        arrayOfValues: number[],\r\n        index: number,\r\n        indexToSwap: number\r\n    ) => {\r\n        await delaySwap(50);\r\n        const tempArray = arrayOfValues;\r\n        const temp = tempArray[index];\r\n        tempArray[index] = tempArray[indexToSwap];\r\n        tempArray[indexToSwap] = temp;\r\n        setArrarrayOfValues(tempArray);\r\n    };\r\n\r\n    const quickSort = async (\r\n        array: number[],\r\n        startIndex: number,\r\n        endIndex: number\r\n    ) => {\r\n        if (startIndex >= endIndex) {\r\n            return;\r\n        }\r\n        let pivotIndex: number = await partition(array, startIndex, endIndex);\r\n        let tempArr = valueStatus;\r\n        tempArr[pivotIndex] = -1;\r\n        setValueStatus(tempArr);\r\n\r\n        await Promise.all([\r\n            quickSort(array, startIndex, pivotIndex - 1),\r\n            quickSort(array, pivotIndex + 1, endIndex),\r\n        ]);\r\n    };\r\n\r\n    const partition = async (\r\n        array: number[],\r\n        startIndex: number,\r\n        endIndex: number\r\n    ) => {\r\n        let tempArr = valueStatus;\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n            tempArr[i] = 1;\r\n        }\r\n        setValueStatus(tempArr);\r\n\r\n        let pivotValue = array[endIndex];\r\n        let pivotIndex = startIndex;\r\n        tempArr[pivotIndex] = 0;\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n            if (array[i] < pivotValue) {\r\n                await swapItems(array, i, pivotIndex);\r\n                tempArr[pivotIndex] = -1;\r\n                pivotIndex++;\r\n                tempArr[pivotIndex] = 0;\r\n            }\r\n        }\r\n\r\n        await swapItems(arrayOfValues, pivotIndex, endIndex);\r\n\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n            if (i != pivotIndex) {\r\n                tempArr[i] = -1;\r\n            }\r\n        }\r\n        setValueStatus(tempArr);\r\n        return pivotIndex;\r\n    };\r\n\r\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n        p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(\r\n            canvasParentRef\r\n        );\r\n        quickSort(arrayOfValues, 0, arrayOfValues.length - 1);\r\n    };\r\n\r\n    const draw = (p5: p5Types) => {\r\n        p5.background('#F2D7EE');\r\n        arrayOfValues.forEach((value, index) => {\r\n            p5.noStroke();\r\n            if (valueStatus[index] == 0) {\r\n                p5.fill('#A5668B');\r\n            } else if (valueStatus[index] == 1) {\r\n                p5.fill('#69306D');\r\n            } else {\r\n                p5.fill('#0E103D');\r\n            }\r\n            p5.rect(index * width, p5.height - value, width, value);\r\n        });\r\n    };\r\n    return <Sketch setup={setup} draw={draw} />;\r\n};\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { BubbleSortSketch } from './Components/BubbleSortSketch';\nimport { QuickSortSketch } from './Components/QuickSortSketch';\n\nconst App = () => {\n    const [sortingSelector, setSortingSlecetorState] = useState<boolean>(true);\n\n    const handleSortingSelectorState = () => {\n        setSortingSlecetorState(!sortingSelector);\n    };\n    return (\n        <>\n            <button\n                className={'button'}\n                onClick={() => handleSortingSelectorState()}\n            >\n                {sortingSelector ? 'Switch to QuickSort' : 'Back to BubbleSort'}\n            </button>\n            {sortingSelector ? <BubbleSortSketch /> : <QuickSortSketch />}\n        </>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}